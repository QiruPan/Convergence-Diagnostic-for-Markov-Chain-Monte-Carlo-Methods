# Effective sample size

# Minnimum ESS for different p, alpha and epsilon 
min.ESS <- function(p, alpha = 0.05, epsilon = 0.05){
  ess <- (2^(2/p)*pi/(p*gamma(1/2))^2/p)*(qchisq(1-alpha,p)/epsilon^2)
  return(ess)
}
min.ESS(2, epsilon = 0.05)
# 153658.4

get.ESS <- function(x, ESS = 3) {
  # Center the data
  x <- x - mean(x)
  # Compute the length of the vector
  M <- length(x)
  # Compute the autocorrelations if necessary
  if (ESS %in% c(1, 4)) {
    rho <- stats::acf(x = x, lag.max = M - 2, plot = FALSE)$acf
  }
  # Compute the variance and autocovariance
  lambda.sq <- spectrum0.ar(x)$spec
  if(ESS == 1){           
    E <- M / (1 + 2 * sum(rho))
  }
  else if (ESS == 'coda') { # method in mcmcse
    sigma.sq <- mcse.multi(x)$cov
  } 
  else if (ESS == 'batchmeans') {  # n*lambda/sigma = length(chain)*var(chain)/(mcse_batchmeans(chain))^2*length(chain) 
    sigma.sq <- (mcse_batchmeans(x))^2 * M # it is supposed to have the same value in "ESS == 2", but it seems like there are some errors
  } 
  else if(ESS == 4) { # https://stats.stackexchange.com/questions/296059/effective-sample-size-greater-than-actual-sample-size/315874
    sigma.sq <- lambda.sq + 2 * sum(rho)
  }
  # Compute the effective sample size
  E <- M * lambda.sq / sigma.sq
  return(E)
}


#Calculate mcse using method "batchmeans"
mcse_batchmeans <- function(x, size = min(100, floor(length(x)/5)), trim = 0, progress = FALSE){
  
  # Set number of batches and calculate batch means
  n <- floor(length(x) / size)
  batch.means <- matrix(NA, n, 1)
  for(i in 1:n){
    batch.means[i] <- mean(x[(1+size*(i-1)):(size*i)])
  }
  
  # Trim the batch means and estimate the standard deviation
  trimmed.batch.means <- batch.means[((1+trim):(n-trim))]
  s <- sd(trimmed.batch.means) / sqrt(length(trimmed.batch.means))
  
  # If progress argument is TRUE, show progress bar
  if(progress){
    pb <- txtProgressBar(min = 0, max = 1, style = 3)
    on.exit(close(pb))
    setTxtProgressBar(pb, 1)
  }
  
  return(s)
}


# Inside the function, the input time series matrix is first converted to a numeric matrix. Then, for each column, fit it to a linear 
# regression model and check if its residuals are 0. If the residual is 0, it means that the column can be regarded as a constant 
# sequence, its spectral density is 0, and the order of the autoregressive model is also 0; otherwise, the AR model is used to fit the 
# column, and its spectral density and autoregressive model are calculated. The order of the regression model, saved into the 
# corresponding vector. Finally, the spectral density vector and order vector are returned as a list as the result.
spectrum0.ar <- function (x) 
{
  x <- as.matrix(x)
  v0 <- order <- numeric(ncol(x))
  names(v0) <- names(order) <- colnames(x)
  z <- 1:nrow(x)
  for (i in 1:ncol(x)) {
    lm.out <- lm(x[, i] ~ z)
    if (identical(all.equal(sd(residuals(lm.out)), 0), TRUE)) {
      v0[i] <- 0
      order[i] <- 0
    }
    else {
      ar.out <- ar(x[, i], aic = TRUE)
      v0[i] <- ar.out$var.pred/(1 - sum(ar.out$ar))^2
      order[i] <- ar.out$order
    }
  }
  return(list(spec = v0, order = order))
}


get.ESS(chain,1)
#161849.3 the most closed value to the paper.
get.ESS(chain,2)
#154088.2
get.ESS(chain,3)
#155330.8
get.ESS(chain,4)
#162173
