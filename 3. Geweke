# Geweke

# In the function, I calculate "Geweke's statistic", which is used to test the convergence of the Markov chain. The calculation method of 
# this statistic is to take the first a*n samples and the last b*n samples of the chain as two independent sample sets, calculate the 
# standardized value of the mean difference of the two sample sets, and then use the two-sided t distribution Tests whether this 
# normalized value is significantly different from zero.
# In the code, I provided two ways to calculate the sample variance, one is the var() function, and the other is the power spectral 
# density estimate calculated by the spectrum0.ar() function. Users should choose which method to use for calculation through the method 
# parameter.


# This is an example function that only outputs the statistics in the geweke test once, that is to say, regardless of batch.
# By default we calculate the difference between first a = 10% part and last b = 50% part.


geweke_toy <- function(chain, a = 0.1, b = 0.5, method = "spectral") {
  n <- length(chain)
  A <- floor(a * n)
  B <- floor(b * n) 
  # Calculating Geweke’s statistic
  if (method == "normal"){
    ssa <- var(chain[1:A])
    ssb <- var(chain[B:n-1])
    z <- (mean(chain[1:A]) - mean(chain[B:n-1])) / 
      sqrt(ssa / length(chain[1:A]) + ssb / length(chain[B:n-1]))
  }
  
  else if (method == "spectral"){
    # This ssa and ssb are the another calculating method of variance (The spectral density at frequency zero) which are using in "coda"
    # Specifically, the spectrum0.ar function performs an autoregressive fit on time series data and computes the variance of the 
    # fitted residuals. This variance can be used as the variance estimate required in the calculation of the Geweke statistic.
    
    # 此处的ssa和ssb是在“coda”中使用的另一种方差计算方法（零频率处的频谱密度）
    # 具体而言，spectrum0.ar函数会对时间序列数据进行自回归拟合，并计算拟合残差的方差。这个方差可以作为Geweke统计量的计算中所需的方差估计。
    ssa <- spectrum0.ar(chain[1:A])$spec
    ssb <- spectrum0.ar(chain[B:n-1])$spec
    z <- (mean(chain[1:A]) - mean(chain[B:n-1])) / 
      sqrt(ssa / length(chain[1:A]) + ssb / length(chain[B:n-1]))
  }
  
  p_value <- 2 * pmin(pnorm(abs(z), lower.tail = FALSE), pnorm(abs(z), lower.tail = TRUE))
  result <- list(z, p_value)
  names(result) <- c("Geweke’s statistic", "p_value")
  return(result)
}

geweke_toy(chain,method = "normal") 
# $`Geweke’s statistic`
# [1] 0.9568996
# $p_value
# [1] 0.338618

geweke_toy(chain,method = "spectral")   
# $`Geweke’s statistic`
# [1] 0.9614776
# $p_value
# [1] 0.5085427


geweke_toy(chain2,method = "normal") 
# $`Geweke’s statistic`
# [1] 0.7455853
# $p_value
# [1] 0.455918

geweke_toy(chain2,method = "spectral")
# $`Geweke’s statistic`
# [1] 0.0193498
# $p_value
# [1] 0.9845621




spectrum0.ar <- function (x) 
{
  x <- as.matrix(x)
  v0 <- order <- numeric(ncol(x))
  names(v0) <- names(order) <- colnames(x)
  z <- 1:nrow(x)
  for (i in 1:ncol(x)) {
    lm.out <- lm(x[, i] ~ z)
    if (identical(all.equal(sd(residuals(lm.out)), 0), TRUE)) {
      v0[i] <- 0
      order[i] <- 0
    }
    else {
      ar.out <- ar(x[, i], aic = TRUE)
      v0[i] <- ar.out$var.pred/(1 - sum(ar.out$ar))^2
      order[i] <- ar.out$order
    }
  }
  return(list(spec = v0, order = order))
}


# A more complex approach

# When calculating the Geweke statistic, the purpose of dividing the sampling sequence into multiple sub sequences is to increase the
# sample size and improve the accuracy of the statistical test. If only the entire sampling sequence is used for the Geweke test, May 
# lead to inaccurate test results, especially if sampling autocorrelation is high. By dividing the sampling sequence into multiple sub 
# sequences, we can obtain more samples and reduce the influence of sampling autocorrelation on the Geweke test. Simultaneously, using 
# multiple sub sequences for the Geweke test can also provide more information in order to identify possible problems or biases in MCMC 
# sampling.

geweke <- function(x, a = 0.1, b = 0.5, num_batches = 20, method = "spectral"){
  n <- length(x)
  A <- floor(a * n)
  B <- floor(b * n)
  batch_size <- floor((n - B) / num_batches)
  
  # Initialize vector of results
  z <- numeric(num_batches)
  p_value <- numeric(num_batches)
  
  if (method == "normal"){
    for (i in 1:num_batches) {
      # Calculate start and end indices for current batch
      start <- B + (i - 1) * batch_size
      end <- start + batch_size
      
      # Calculate Geweke’s statistic for current batch
      ssa <- var(x[1:A])
      ssb <- var(x[start:end])
      z[i] <- (mean(x[1:A]) - mean(x[start:end])) / sqrt(ssa / length(x[1:A]) + ssb / length(x[start:end]))
      
      # Calculate p-value for current batch
      p_value[i] <- 2 * pmin(pnorm(abs(z[i]), lower.tail = FALSE), pnorm(abs(z[i]), lower.tail = TRUE))
    }
  }
  else if (method == "spectral"){
    for (i in 1:num_batches) {
      # Calculate start and end indices for current batch
      start <- B + (i - 1) * batch_size
      end <- start + batch_size
      
      # Calculate Geweke’s statistic for current batch
      ssa <- spectrum0.ar(x[1:A])$spec
      ssb <- spectrum0.ar(x[start:end])$spec
      z[i] <- (mean(x[1:A]) - mean(x[start:end])) / sqrt(ssa / length(x[1:A]) + ssb / length(x[start:end]))
      
      # Calculate p-value for current batch
      p_value[i] <- 2 * pmin(pnorm(abs(z[i]), lower.tail = FALSE), pnorm(abs(z[i]), lower.tail = TRUE))
    }
  }
  
  # Calculate the proportion of p-values less than 0.05
  p_prop <- mean(p_value < 0.05)
  
  # Combine results from all batches
  result <- list(z = z, p_value = p_value, p_prop = p_prop)
  names(result) <- c("Geweke’s statistic", "p_value", "p_value < 0.05 proportion")
  
  # Plot the Geweke statistics and p-values
  par(mfrow = c(2, 1))
  plot(1:length(z), z, type = "p", xlab = "Batch", ylab = "Geweke statistic")
  abline(h = 0, lty = 2, col = "gray")
  abline(h = 1.96, lty = 2, col = "red")
  abline(h = -1.96, lty = 2, col = "red")
  plot(1:length(p_value), p_value, type = "p", xlab = "Batch", ylab = "p-value")
  abline(h = 0.05, lty = 2, col = "red")
  
  # Return the result
  return(result)
}

geweke(as.matrix(chain), method = "normal")
# $`Geweke’s statistic`
# [1]  0.7955711  0.2403806 -0.8789043  0.5954554  1.1936875  0.9066064  0.6471732  2.2176063  1.9695905 -0.4217743  0.2640111 -0.8993436
# [13]  1.4209809  0.1172982  0.8251360 -2.2998323  1.1362761 -0.8269415  2.2367535  0.2723065

# $p_value
# [1] 0.42628135 0.81003523 0.37945314 0.55153907 0.23260025 0.36461495 0.51751985 0.02658169 0.04888532 0.67318980 0.79177139 0.36846966
# [13] 0.15532231 0.90662378 0.40929436 0.02145772 0.25584104 0.40827024 0.02530245 0.78538639

# $`p_value < 0.05 proportion`
# [1] 0.2

geweke(chain,method = "spectral")
# $`Geweke’s statistic`
# [1]  0.55708664  0.17091344 -0.62301654  0.40833060  0.81823344  0.62651367  0.44923632  1.55656743  1.40100980 -0.28025488  0.17203576
# [12] -0.63314688  0.96562816  0.08064388  0.57793040 -1.63194456  0.78713090 -0.55787855  1.56791426  0.18053645

# $p_value
# [1] 0.5774682 0.8642918 0.5332737 0.6830310 0.4132239 0.5309781 0.6532612 0.1195732 0.1612111 0.7792820 0.8634094 0.5266377 0.3342303
# [14] 0.9357252 0.5633111 0.1026912 0.4312052 0.5769273 0.1169011 0.8567314

# $`p_value < 0.05 proportion`
# [1] 0



geweke(chain2, method = "normal")
# $`Geweke’s statistic`
# [1]   69.292861   93.482889   91.740339  111.968701   67.318169   77.404564   44.966124   98.991176   71.637879  102.904402   14.658004
# [12]  112.877037   84.631449 -144.791918    5.374841  -11.527786 -325.710137 -325.710137 -325.710137 -325.710137

# $p_value
# [1] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
# [11] 1.197408e-48 0.000000e+00 0.000000e+00 0.000000e+00 7.665027e-08 9.556960e-31 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00

# $`p_value < 0.05 proportion`
# [1] 1

geweke(chain2,method = "spectral")
# $`Geweke’s statistic`
# [1]  2.6946038  3.5393954  3.5041277  4.1138124  2.7603660  3.0712434  1.6683505  3.7803055  2.8169506  3.8721165  0.5797126  4.0679273
# [13]  3.2985403 -4.6585195  0.1596631 -0.3006672 -9.1260349 -9.1260349 -9.1260349 -9.1260349

# $p_value
# [1] 7.047237e-03 4.010446e-04 4.581056e-04 3.891778e-05 5.773664e-03 2.131693e-03 9.524616e-02 1.566360e-04 4.848198e-03 1.078944e-04
# [11] 5.621084e-01 4.743317e-05 9.718893e-04 3.184916e-06 8.731465e-01 7.636683e-01 7.105407e-20 7.105407e-20 7.105407e-20 7.105407e-20

# $`p_value < 0.05 proportion`
# [1] 0.8


# Wouldn't this violate the original intention of geweke? By default, geweke calculates the variance for the last 50% of the samples.

# The original intention of the Geweke method is to test whether the last 50% of the samples come from the same distribution, rather 
# than to test whether each batch comes from the same distribution. In this function, in order to achieve batch calculation, the sample 
# is divided into multiple small batches. Therefore, what this function implements is not the standard Geweke method, but a 
# modification of the Geweke method.


# So we should choose as many batches as possible when there are enough independent and identically distributed samples in each batch, 
# right?

# Generally speaking, we hope that there are enough independent and identically distributed samples in each batch, and we also want to 
# choose as many batches as possible to more accurately test whether the samples come from the same distribution.
# When using the Geweke method in practice, some basic analysis is usually performed on the data set to determine the nature and 
# distribution of the sample data, and then select the appropriate batch size and batch number based on this information.
# It should be noted that the selection of batch size and number of batches may have an impact on the test results, so when using the 
# Geweke method, it is necessary to adjust it according to the specific situation and conduct multiple experiments to verify the 
# reliability of the results.


# A version that can handle multi-dimensional situations XD.
geweke_multi <- function(x, a = 0.1, b = 0.5, num_batches = 20, method = "normal") {
  n <- dim(x)[1]
  m <- dim(x)[2]
  results <- lapply(1:m, function(i) {
    geweke(x[,i], a, b, num_batches, method)
  })
  names_vec <- c("Geweke’s statistic", "p_value")
  names(results) <- paste0("Chain", 1:m)
  for (i in 1:m) {
    names(results[[i]]) <- names_vec
  }
  return(results)
}

set.seed(123)
x <- MASS::mvrnorm(n = 1000, mu = c(0,0), Sigma = matrix(c(1,0.5,0.5,2), nrow = 2))
# Calculate Geweke's test for each dimension
geweke_multi(x)

# Geweke's conclusions may be inaccurate if the Markov chain takes a long time to warm up. Geweke's approach is based on the assumption 
# that the Markov chain is already stable. If the Markov chain has not yet converged to a stable distribution, Geweke's results may be 
# affected by the warm-up period, leading to erroneous conclusions. Therefore, samples from the warm-up period usually need to be 
# discarded before applying the Geweke method. 


spectrum0.ar <- function (x) 
{
  x <- as.matrix(x)
  v0 <- order <- numeric(ncol(x))
  names(v0) <- names(order) <- colnames(x)
  z <- 1:nrow(x)
  for (i in 1:ncol(x)) {
    lm.out <- lm(x[, i] ~ z)
    if (identical(all.equal(sd(residuals(lm.out)), 0), TRUE)) {
      v0[i] <- 0
      order[i] <- 0
    }
    else {
      ar.out <- ar(x[, i], aic = TRUE)
      v0[i] <- ar.out$var.pred/(1 - sum(ar.out$ar))^2
      order[i] <- ar.out$order
    }
  }
  return(list(spec = v0, order = order))
}
